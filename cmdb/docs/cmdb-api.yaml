openapi: 3.0.1
info:
  title: CMDB API
  description: Description
  contact:
    email: a48061@alunos.isel.pt / a48066@alunos.isel.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:1500/

tags:
  - name: Movies
  - name: Groups
  - name: Users

paths:
  /movies/top:
    get:
      tags:
        - Movies
      summary: Get top rated Movies
      description: Get the all time top rated Movies
      operationId: getTopMovies
      parameters:
        - name: limit
          in: query
          description: Maximum number of Movies to return
          schema:
            maximum: 250
            minimum: 0
            type: integer
      responses:
        200:
          description: Results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /movies:
    get:
      tags:
        - Movies
      summary: Get movies
      description: By passing in the appropriate options, you can search for Movies
      operationId: getMovies
      parameters:
        - name: title
          in: query
          description: Pass an optional search string for looking up Movies with that title
          schema:
            type: string
          required: true
        - name: limit
          in: query
          description: Maximum number of Movies to return
          schema:
            maximum: 250
            minimum: 0
            type: integer
      responses:
        200:
          description: Search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /groups:
    get:
      tags:
        - Groups
      summary: Get Groups
      description: Get all Groups that belong to a specific User
      operationId: getGroups
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      tags:
      - Groups
      summary: Create a Group
      description: Create a new Group for a specific User
      operationId: creatGroup
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Group to create
        content:
          application/json:
            schema:
              required:
                - name
              type: object
              properties:
                name:
                  type: string
                  example: My Group
                description:
                  type: string
                  example: Some Group Description
        required: true
      responses:
        201:
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewGroupCreated'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /groups/{groupId}:
    get:
      tags:
      - Groups
      summary: Get a Group
      description: Get a Group given is id
      operationId: getGroupById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupId
          in: path
          description: ID of Group to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: Group fetch successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    put:
      tags:
      - Groups
      summary: Update a Group
      description: Update a Group in the system
      operationId: updateGroup
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupId
          in: path
          description: ID of the Group to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update a Group in the system
        content:
          application/json:
            schema:
              required:
              - name
              type: object
              properties:
                name:
                  type: string
                  example: My Group
                description:
                  type: string
                  example: Some Group Description
        required: true
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      tags:
      - Groups
      summary: Delete a Group
      description: Delete a Group in the system
      operationId: deleteGroup
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupId
          in: path
          description: ID of the Group to be deleted
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Group deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /groups/{groupId}/{movieId}:
    put:
      tags:
        - Groups
      summary: Add a Movie to a Group
      description: Update a Group with a new Movie
      operationId: addMovie
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupId
          in: path
          description: ID of the Group to be updated
          required: true
          schema:
            type: integer
        - name: movieId
          in: path
          description: ID of the Movie to be added
          required: true
          schema:
            type: string
      responses:
        200:
          description: Group updated with the added Movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Group not found or Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      tags:
        - Groups
      summary: Remove a Movie from a Group
      description: Update a Group without a Movie
      operationId: removeMovie
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupId
          in: path
          description: ID of the Group to be updated
          required: true
          schema:
            type: integer
        - name: movieId
          in: path
          description: ID of the Movie to be added
          required: true
          schema:
            type: string
      responses:
        200:
          description: Group updated without the removed Movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
        400:
          description: Invalid input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        401:
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Group not found or Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /users:
    post:
      tags:
      - Users
      summary: Create a User
      description: Create a User in the system
      operationId: createUser
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                required:
                  - status
                  - token
                type: object
                properties:
                  status:
                    type: string
                    example: User was created with success
                  token:
                    type: string
                    format: uuid
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    Movies:
      required:
        - movies
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    Movie:
      required:
      - id
      - title
      type: object
      properties:
        id:
          type: string
          example: tt0111161
        rank:
          type: integer
          example: 1
        title:
          type: string
          example: The Shawshank Redemption
        year:
          type: integer
          example: 1994
        duration:
            type: integer
            example: 142
        rating:
          type: number
          example: 9.2
        ratingCount:
          type: integer
          example: 2659683
    Group:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: My Group
        description:
          type: string
          example: Some Group description
        totalDuration:
          type: integer
          example: 120
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    NewGroup:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: My Group
        description:
          type: string
          example: Some Group description
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    NewGroupCreated:
      required:
        - status
        - group
      type: object
      properties:
        status:
          type: string
          example: Group with id 1 created with success
        group:
          $ref: '#/components/schemas/NewGroup'
    InvalidRequest:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "Invalid argument: {{argName}}"
            description:
              type: string
              example: "Some description"
    InternalServerError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "Internal Server Error"
    InvalidTokenError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "Invalid or missing token"
    UnauthorizedError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "User not found"
    GroupNotFoundError:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "Group with id {{groupId}} not found"

